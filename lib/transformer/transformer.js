// Generated by CoffeeScript 1.8.0
(function() {
  var SCHEMA_FILENAME, SHEET_NAME, dust, filename, fs, jpp, loadExcelRecords, parseExcelRecords, path, pd, region, renderXml, schemas, templates, transform, xlsx, _i, _j, _len, _len1, _ref, _ref1;

  path = require("path");

  fs = require("fs");

  xlsx = require("xlsx");

  dust = require("dustjs-linkedin");

  jpp = require("json-path-processor");

  pd = (require("pretty-data")).pd;

  SCHEMA_FILENAME = "schema.json";

  SHEET_NAME = "PayPal";

  schemas = {};

  _ref = fs.readdirSync(path.join(__dirname, "schema"));
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    filename = _ref[_i];
    region = filename.replace(/\.json$/, '');
    schemas[region] = JSON.parse(fs.readFileSync(path.join(__dirname, "schema", filename)));
  }

  templates = {};

  _ref1 = fs.readdirSync(path.join(__dirname, "templates"));
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    filename = _ref1[_j];
    region = filename.replace(/\.dust$/, '');
    templates[region] = (fs.readFileSync(path.join(__dirname, "templates", filename))).toString();
  }

  loadExcelRecords = function(excelFilename) {
    var cell, key, records, sheet, value;
    records = {};
    sheet = (xlsx.readFile(excelFilename)).Sheets[SHEET_NAME];
    for (key in sheet) {
      value = sheet[key];
      cell = xlsx.utils.decode_cell(key);
      if (typeof cell.r === "number" && cell.r > 1 && typeof cell.c === "number") {
        (jpp(records)).set(cell.r + "." + cell.c, value.v, true);
      }
    }
    return records;
  };

  parseExcelRecords = function(records, region) {
    var account, accounts, column, columns, data, element, jsonPath, row, schema, _k, _len2;
    accounts = [];
    schema = schemas[region];
    for (row in records) {
      columns = records[row];
      account = {};
      for (_k = 0, _len2 = schema.length; _k < _len2; _k++) {
        element = schema[_k];
        column = element.column;
        jsonPath = element.jsonPath;
        data = columns[column];
        if ((jsonPath != null) && jsonPath !== "") {
          (jpp(account)).set(jsonPath, data, true);
        }
      }
      accounts.push(account);
    }
    return accounts;
  };

  renderXml = function(accounts, region, done) {
    var account, template, _k, _len2, _results;
    if (accounts == null) {
      throw new Error;
    }
    template = templates[region];
    _results = [];
    for (_k = 0, _len2 = accounts.length; _k < _len2; _k++) {
      account = accounts[_k];
      _results.push(dust.renderSource(template, account, function(error, output) {
        if (error != null) {
          throw new Error;
        } else {
          return done(pd.xml(output));
        }
      }));
    }
    return _results;
  };

  transform = function(excelFilename, region, done) {
    var accounts;
    accounts = parseExcelRecords(loadExcelRecords(excelFilename), region);
    console.log(pd.json(accounts));
    return renderXml(accounts, region, done);
  };

  transform(path.join(__dirname, "test.xlsx"), "us", console.log);

  module.exports = {
    "transform": transform
  };

}).call(this);
